1. 성능

컴파일러  성능의 차이 ( 네이티브 대비 얼만큼 인지 자료 )
단말 성능이 어느정도 면  네이티브 정도 까지 올라갈수있냐? ( 그 임계값은 얼마정도인가?)
2. 파편화

HTML5 Score 점수 
브라우저가 너무 많다. html5 지원 점수도 다르다. 
스펙은 2014년에 HTML5 가 권고안이 나오며 2016년에는 HTML5.1 이 나옴
하지만 스펙은 의미가 없음 현재 스펙이 완료 되기까지 기다리기도 힘들며  완료 되지 않았는데도 이미 쓰는Feature 들 많음 ( localStorage , webGL 등등)
해결 방안으로 iOS의 경우는  해상도 고정-> 단말이 달라도 OS 디폴트 브라우저의 통합 
 안드로이드는?  Chrome for Android   출시 ->  업데이트 가 되는가( 찾아봐야할 자료 ) , 
웹뷰 는 젤리빈에서도 안드로이드 디폴트를 사용--> 또 다른 파편화 ?  
3. deviceAPI 

Hyrid App이  대안 
그렇다면 서비스 제공자들은 어떻게 app을 개발해야 하는가
라이언 브릿지-> 자사의 서비스에 따라 native/ hybrid / web 선택 해야함 
4. 개발툴

임상석 매니저님께 
부족함 : 왜 부족한가? ( 관련 자료)
언어의 standalone이 불가능?
5. 에코 시스템

웹 관점에서는 현재 충분하다.
App/platform 관점에서는 불충분
문제점: 태생적 한계 -> 보안 x, 마켓 필요 없음  , 유료화 방법이 없음 ,
6. 개발자 / 인력 

언어별 개발자 숫자 -> 웹 / 서버는 
과연 client side 의 뛰어난 개발자는 몇명일까 ? ( 모바일 웹 ) -> 
왜 그런걸까??  : 웹은 주로 코스트를 낮추기 위해  개발에 사용 -> 즉 비용이 포인트 
정부 정책 ->  html5 개발자 대량 양성설 ->  별로 좋지 않음 
필요한건 숫자가 아니라 퀄리티 
기대만 크고 돈은 적게 쓰고. 당연히 뛰어난 개발자가 있을수 없음
 

결론 

웹은 그냥 웹이다. 태생적 한계가 아닌 그냥 자체를 인정하자. 
App/ platform 관점이 아니라 개방 / 공유 등등의 정신에 따르면 웹은 잘 크고 있음 
그렇다면 웹은 app/platform  관점을 가지면 안되는것인가? 
다시 원점 web 만큼의 사용자가 없다. ( 유선에서도 90% 이상의 웹 사용 ) ( 무선에서도 비슷할 것이라 추산)
그렇다면 웹에서는 돈이 안되는 것인가? 
페이스북/구글의 사례 
특징: 사용자에게 돈을 받으려고 하면 안된다.-> 사용자 기반으로 제 3자에게 비용을 얻어내는 방향으로 가야 한다. 